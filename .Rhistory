full_list<- list(conf,df)
names(full_list) <- c("conf.mat", "perf")
#full_list <<- full_list
# Return a list containing the confusion matrix and the data frame of the metrics
# If "all", return all metrics. Otherwise, return just the requested subset of metrics
if ("all" %in% type){
return(full_list)
} else {
full_list[[2]]<- full_list[[2]]%>%
filter(row.names(full_list[[2]]) %in% type)
return(full_list)
}
}
df<- df%>%select(-c(7:14))%>%select(-c(1,7))
# Upsample the data to artifically overcome sample imbalance
df.more.idx <- sample(which(df$is_intrusion == "Yes"), 900, replace = TRUE)
df<- df%>%select(-c(7:14))%>%select(-c(1,7))
df.more.idx <- sample(which(df$is_intrusion == "Yes"), 900, replace = TRUE)
View(df)
df.more.idx <- sample(which(df$is_intrusion == 1), 900, replace = TRUE)
set.seed(981)
df.upsample <- rbind(df,
df[df.more.idx, ])
ggplot(data = df.upsample,aes(x = is_intrusion))+
geom_bar(aes(fill=is_intrusion))+ ggtitle("Classes Balanced")
test.indexes <- sample(1:nrow(df.upsample),
round(0.2 * nrow(df.upsample)))
train.indexes <- setdiff(1:nrow(df.upsample), test.indexes)
df.train <- df.upsample[train.indexes,]
df.test <- df.upsample[test.indexes,]
intrusion.tree <- rpart(is_intrusion ~ ., df.train)
plot(intrusion.tree)
text(intrusion.tree)
intrusion.party <- as.party(intrusion.tree)
plot(intrusion.party)
print(intrusion.party)
intrusion.full <- rpart(is_intrusion ~ ., data = df.train,
control = rpart.control(minsplit=10, cp=0.002))
# Run the `plotcp` command on this tree. Also look at the `cptable` attribute of `marketing.full`
plotcp(intrusion.full)
intrusion.full$cptable
mycp <- 0.046
intrusion.pruned<- prune(intrusion.full,cp= mycp)
df.pruned.party <- as.party(intrusion.pruned)
plot(df.pruned.party, gp = gpar(fontsize = 7))
my_pred<- predict(intrusion.pruned, df.test, type="prob")[,1]
classMetrics(my_pred, df.test$is_intrusion,cutoff = 0.20)
df <- read.csv("network_traffic.csv")
cbPalette <- c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
set.seed(1234)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message=FALSE)
library(rpart) # added tree library
library(partykit)
library(ggplot2)
library(gridExtra)
library(dplyr)
library(ggcorrplot)
library(randomForest)
library(cluster)
library(caret)
library(leaps)
library(Rtsne)
df <- read.csv("network_traffic.csv")
cbPalette <- c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
set.seed(1234)
# drop useless columns
df <- select(df, -c(num_outbound_cmds, land, num_failed_logins, wrong_fragment, urgent, is_host_login, su_attempted))
# Clean is_intrusion column
df$is_intrusion <- ifelse(df$is_intrusion == 1, 1, 0)
df$is_intrusion <- as.factor(df$is_intrusion)
df$protocol_type <- as.factor(df$protocol_type)
df$service <- as.factor(df$service)
df$flag <- as.factor(df$flag)
df$logged_in <- as.factor(df$logged_in)
df$root_shell <- as.factor(df$root_shell)
df$is_guest_login <- as.factor(df$is_guest_login)
options(scipen=999)
ggplot(data = df,aes(x = as.factor(service),y = src_bytes))+
geom_boxplot()+
coord_flip()+ylab("number of data bytes from source to destination ")+xlab("Service")
ggplot(data = df,aes(x = as.factor(service),y = dst_bytes))+
geom_boxplot()+
coord_flip()+
ylab("number of data bytes from destination to source")+xlab("Service")
View(df)
classMetrics <- function(score, y, cutoff,
type = c("all", "accuracy", "sensitivity",
"specificity", "ppv", "npv", "precision",
"recall")) {
# classify the observations based on score and cutoff
observed <- y
predicted <- ifelse(score >= cutoff,1,0)
# Form confusion matrix
conf<-table(predicted,observed)
# Use the appropriate entries in the confusion matrix to calculate all metrics:
# accuracy, sensitivity, specificity, ppv, npv, precision (which is the same as ppv), recall (which is the same as sensitivity)
#accuracy <-
accuracy<- round((conf[4]+conf[1])/sum(conf),6)
sensitivity <- (conf[4])/(conf[3]+conf[4])
specificity <-  conf[1]/(conf[1]+conf[2])
ppv         <- conf[4]/(conf[4]+conf[2])
npv         <- conf[1]/(conf[1]+conf[3])
precision   <- ppv
recall      <- sensitivity
# I'm giving you the exact names you should use in your output dataframe
metric.names <- c("accuracy", "sensitivity", "specificity",
"ppv", "npv", "precision", "recall")
# Form into data frame
value <- c(accuracy, sensitivity, specificity,
ppv, npv, precision, recall)
# Your data frame should contain ONLY ONE COLUMN named "value"
# assign the metric.names above as the rownames of your data frame (just as the rownames, not as a second column!)
df <- data.frame(row.names = metric.names,value)
full_list<- list(conf,df)
names(full_list) <- c("conf.mat", "perf")
#full_list <<- full_list
# Return a list containing the confusion matrix and the data frame of the metrics
# If "all", return all metrics. Otherwise, return just the requested subset of metrics
if ("all" %in% type){
return(full_list)
} else {
full_list[[2]]<- full_list[[2]]%>%
filter(row.names(full_list[[2]]) %in% type)
return(full_list)
}
}
ggplot(data = df,aes(x = is_intrusion))+
geom_bar(aes(fill=is_intrusion))+ ggtitle("Class Imbalance")
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message=FALSE)
library(rpart) # added tree library
library(partykit)
library(ggplot2)
library(gridExtra)
library(dplyr)
library(ggcorrplot)
library(randomForest)
library(cluster)
library(caret)
library(leaps)
library(Rtsne)
df <- read.csv("network_traffic.csv")
cbPalette <- c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
set.seed(1234)
# drop useless columns
df <- select(df, -c(num_outbound_cmds, land, num_failed_logins, wrong_fragment, urgent, is_host_login, su_attempted))
# Clean is_intrusion column
df$is_intrusion <- ifelse(df$is_intrusion == 1, 1, 0)
# make Yes/No variables more readable
#df <- df %>%
#  mutate(is_intrusion = ifelse(is_intrusion == 0,"No","Yes")) %>%
#  mutate(logged_in = ifelse(logged_in == 0,"No","Yes")) %>%
#  mutate(root_shell = ifelse(root_shell == 0,"No","Yes")) %>%
#  mutate(is_guest_login = ifelse(is_guest_login == 0,"No","Yes"))
# convert to factors
df$is_intrusion <- as.factor(df$is_intrusion)
df$protocol_type <- as.factor(df$protocol_type)
df$service <- as.factor(df$service)
df$flag <- as.factor(df$flag)
df$logged_in <- as.factor(df$logged_in)
df$root_shell <- as.factor(df$root_shell)
df$is_guest_login <- as.factor(df$is_guest_login)
p1 <- qplot(df$duration, geom="histogram", xlab="Duration")
p2 <- qplot(df$protocol_type, geom="bar", xlab="Protocol Type")
p3 <- qplot(df$service, geom="bar", xlab="Service")
p4 <- qplot(df$src_bytes, geom="histogram", xlab="Bytes from Source to Destination")
p5 <- qplot(df$dst_bytes, geom="histogram", xlab="Bytes from Destination to Source")
p6 <- qplot(df$flag, geom="bar", xlab="Error Status")
p7 <- qplot(df$hot, geom="histogram", xlab="Hot Indicators")
p8 <- qplot(df$logged_in, geom="bar", xlab="Logged In")
p9 <- qplot(df$num_compromised, geom="histogram", xlab="Number Compromised")
p10 <- qplot(df$root_shell, geom="bar", xlab="Root Shell")
p11 <- qplot(df$num_root, geom="histogram", xlab="Number of Root Commands")
p12 <- qplot(df$num_file_creations, geom="histogram", xlab="File Creations")
p13 <- qplot(df$num_shells, geom="histogram", xlab="Number of Shells")
p14 <- qplot(df$num_access_files, geom="histogram", xlab="Accessed Files")
p15 <- qplot(df$is_guest_login, geom="bar", xlab="Guest Login")
p16 <- qplot(df$is_intrusion, geom="bar", xlab="Intrusion")
grid.arrange(p1, p2, p3, p4, p5, p6, p7, p8, p9, ncol=3)
grid.arrange(p10, p12, p13, p14, p15, p16, ncol=3)
#Adding a boxplots src and dst bytes by service
options(scipen=999)
ggplot(data = df,aes(x = as.factor(service),y = src_bytes))+
geom_boxplot()+
coord_flip()+ylab("number of data bytes from source to destination ")+xlab("Service")
ggplot(data = df,aes(x = as.factor(service),y = dst_bytes))+
geom_boxplot()+
coord_flip()+
ylab("number of data bytes from destination to source")+xlab("Service")
ggplot(data = df,aes(x = as.factor(service),y = duration ))+
geom_boxplot()+
coord_flip()+xlab("Service Types")
classMetrics <- function(score, y, cutoff,
type = c("all", "accuracy", "sensitivity",
"specificity", "ppv", "npv", "precision",
"recall")) {
# classify the observations based on score and cutoff
observed <- y
predicted <- ifelse(score >= cutoff,1,0)
# Form confusion matrix
conf<-table(predicted,observed)
# Use the appropriate entries in the confusion matrix to calculate all metrics:
# accuracy, sensitivity, specificity, ppv, npv, precision (which is the same as ppv), recall (which is the same as sensitivity)
#accuracy <-
accuracy<- round((conf[4]+conf[1])/sum(conf),6)
sensitivity <- (conf[4])/(conf[3]+conf[4])
specificity <-  conf[1]/(conf[1]+conf[2])
ppv         <- conf[4]/(conf[4]+conf[2])
npv         <- conf[1]/(conf[1]+conf[3])
precision   <- ppv
recall      <- sensitivity
# I'm giving you the exact names you should use in your output dataframe
metric.names <- c("accuracy", "sensitivity", "specificity",
"ppv", "npv", "precision", "recall")
# Form into data frame
value <- c(accuracy, sensitivity, specificity,
ppv, npv, precision, recall)
# Your data frame should contain ONLY ONE COLUMN named "value"
# assign the metric.names above as the rownames of your data frame (just as the rownames, not as a second column!)
df <- data.frame(row.names = metric.names,value)
full_list<- list(conf,df)
names(full_list) <- c("conf.mat", "perf")
#full_list <<- full_list
# Return a list containing the confusion matrix and the data frame of the metrics
# If "all", return all metrics. Otherwise, return just the requested subset of metrics
if ("all" %in% type){
return(full_list)
} else {
full_list[[2]]<- full_list[[2]]%>%
filter(row.names(full_list[[2]]) %in% type)
return(full_list)
}
}
plotClassMetrics <- function(score, y, xvar = NULL, yvar = c("accuracy", "sensitivity",
"specificity", "ppv", "npv", "precision",
"recall"),
flip.x = FALSE) {
# matches the user-input yvar argument against the list of valid options specified in the function header
yvar <- match.arg(yvar)
# If there are a lot of (more than 100) unique score values, just calculate the metrics
# along an evenly spaced grid of 100 scores.
unique.scores <- unique(score)
if(length(unique.scores) > 100) {
cutoff.seq <- sample(unique.scores, 100, replace = FALSE)
} else { # otherwise just use the unique score values to calculate the metrics
cutoff.seq <- unique.scores
}
# number of score values to evaluate the metrics
n <- length(cutoff.seq)
# initialize the vectors to record the x & y coordinates
x.out <- numeric(n)
y.out <- numeric(n)
# Loop over all values of the score and calculate the performance metrics
for(i in 1:n) {
if(!is.null(xvar)) { # specified metric as x axis values
# call classMetrics to calculate the metrics and record the values
metrics <- classMetrics(score, y, cutoff = cutoff.seq[i], type = c(xvar, yvar))
x.out[i] <- metrics$perf[xvar, 1]
y.out[i] <- metrics$perf[yvar, 1]
} else { # score as x axis values
# call classMetrics to calculate the metrics and record the values
metrics <- classMetrics(score, y, cutoff = cutoff.seq[i], type = c(yvar))
x.out[i] <- cutoff.seq[i]
y.out[i] <- metrics$perf[yvar, 1]
}
}
# flip x values if required
if(flip.x) {
x.out <- 1 - x.out
}
# Combine metrics into a data frame
df.out <- data.frame(score = cutoff.seq, x = x.out, y = y.out)
# Reorder the data frame in increasing order of the x-axis variable
df.out <- df.out[order(df.out$score), ]
# De-duplicate x-axis
df.out <- subset(df.out, subset = !duplicated(df.out$x))
# determine the x-axis label
if(!is.null(xvar)) {
x.text <- ifelse(flip.x, paste0("1 - ", xvar), xvar)
} else {
x.text <- "score"
}
# Construct line plot
print(qplot(data = df.out, x = x, y = y, geom = "line",
xlab = ifelse(is.null(xvar), "score", x.text),
ylab = yvar, ylim = c(0, 1)))
}
ggplot(data = df,aes(x = is_intrusion))+
geom_bar(aes(fill=is_intrusion))+ ggtitle("Class Imbalance")
df<- df%>%select(-c(7:14))%>%select(-c(1,7))
# Upsample the data to artifically overcome sample imbalance
df.more.idx <- sample(which(df$is_intrusion == 1), 900, replace = TRUE)
set.seed(981)
df.upsample <- rbind(df,
df[df.more.idx, ])
ggplot(data = df.upsample,aes(x = is_intrusion))+
geom_bar(aes(fill=is_intrusion))+ ggtitle("Classes Balanced")
# Randomly select 20% of the data to be held out for model validation
test.indexes <- sample(1:nrow(df.upsample),
round(0.2 * nrow(df.upsample)))
train.indexes <- setdiff(1:nrow(df.upsample), test.indexes)
df.train <- df.upsample[train.indexes,]
df.test <- df.upsample[test.indexes,]
intrusion.tree <- rpart(is_intrusion ~ ., df.train)
plot(intrusion.tree)
text(intrusion.tree)
intrusion.party <- as.party(intrusion.tree)
plot(intrusion.party)
print(intrusion.party)
intrusion.full <- rpart(is_intrusion ~ ., data = df.train,
control = rpart.control(minsplit=10, cp=0.002))
# Run the `plotcp` command on this tree. Also look at the `cptable` attribute of `marketing.full`
plotcp(intrusion.full)
intrusion.full$cptable
mycp <- 0.046
intrusion.pruned<- prune(intrusion.full,cp= mycp)
print(intrusion.pruned)
df.pruned.party <- as.party(intrusion.pruned)
plot(df.pruned.party, gp = gpar(fontsize = 7))
my_pred<- predict(intrusion.pruned, df.test, type="prob")[,1]
classMetrics(my_pred, df.test$is_intrusion,cutoff = 0.20)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message=FALSE)
library(rpart) # added tree library
library(partykit)
library(ggplot2)
library(gridExtra)
library(dplyr)
library(ggcorrplot)
library(randomForest)
library(cluster)
library(caret)
library(leaps)
library(Rtsne)
df <- read.csv("network_traffic.csv")
cbPalette <- c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
#set.seed(1234)
# drop useless columns
df <- select(df, -c(num_outbound_cmds, land, num_failed_logins, wrong_fragment, urgent, is_host_login, su_attempted))
# Clean is_intrusion column
df$is_intrusion <- ifelse(df$is_intrusion == 1, 1, 0)
# make Yes/No variables more readable
#df <- df %>%
#  mutate(is_intrusion = ifelse(is_intrusion == 0,"No","Yes")) %>%
#  mutate(logged_in = ifelse(logged_in == 0,"No","Yes")) %>%
#  mutate(root_shell = ifelse(root_shell == 0,"No","Yes")) %>%
#  mutate(is_guest_login = ifelse(is_guest_login == 0,"No","Yes"))
# convert to factors
df$is_intrusion <- as.factor(df$is_intrusion)
df$protocol_type <- as.factor(df$protocol_type)
df$service <- as.factor(df$service)
df$flag <- as.factor(df$flag)
df$logged_in <- as.factor(df$logged_in)
df$root_shell <- as.factor(df$root_shell)
df$is_guest_login <- as.factor(df$is_guest_login)
p1 <- qplot(df$duration, geom="histogram", xlab="Duration")
p2 <- qplot(df$protocol_type, geom="bar", xlab="Protocol Type")
p3 <- qplot(df$service, geom="bar", xlab="Service")
p4 <- qplot(df$src_bytes, geom="histogram", xlab="Bytes from Source to Destination")
p5 <- qplot(df$dst_bytes, geom="histogram", xlab="Bytes from Destination to Source")
p6 <- qplot(df$flag, geom="bar", xlab="Error Status")
p7 <- qplot(df$hot, geom="histogram", xlab="Hot Indicators")
p8 <- qplot(df$logged_in, geom="bar", xlab="Logged In")
p9 <- qplot(df$num_compromised, geom="histogram", xlab="Number Compromised")
p10 <- qplot(df$root_shell, geom="bar", xlab="Root Shell")
p11 <- qplot(df$num_root, geom="histogram", xlab="Number of Root Commands")
p12 <- qplot(df$num_file_creations, geom="histogram", xlab="File Creations")
p13 <- qplot(df$num_shells, geom="histogram", xlab="Number of Shells")
p14 <- qplot(df$num_access_files, geom="histogram", xlab="Accessed Files")
p15 <- qplot(df$is_guest_login, geom="bar", xlab="Guest Login")
p16 <- qplot(df$is_intrusion, geom="bar", xlab="Intrusion")
grid.arrange(p1, p2, p3, p4, p5, p6, p7, p8, p9, ncol=3)
grid.arrange(p10, p12, p13, p14, p15, p16, ncol=3)
#Adding a boxplots src and dst bytes by service
options(scipen=999)
ggplot(data = df,aes(x = as.factor(service),y = src_bytes))+
geom_boxplot()+
coord_flip()+ylab("number of data bytes from source to destination ")+xlab("Service")
ggplot(data = df,aes(x = as.factor(service),y = dst_bytes))+
geom_boxplot()+
coord_flip()+
ylab("number of data bytes from destination to source")+xlab("Service")
ggplot(data = df,aes(x = as.factor(service),y = duration ))+
geom_boxplot()+
coord_flip()+xlab("Service Types")
classMetrics <- function(score, y, cutoff,
type = c("all", "accuracy", "sensitivity",
"specificity", "ppv", "npv", "precision",
"recall")) {
# classify the observations based on score and cutoff
observed <- y
predicted <- ifelse(score >= cutoff,1,0)
# Form confusion matrix
conf<-table(predicted,observed)
# Use the appropriate entries in the confusion matrix to calculate all metrics:
# accuracy, sensitivity, specificity, ppv, npv, precision (which is the same as ppv), recall (which is the same as sensitivity)
#accuracy <-
accuracy<- round((conf[4]+conf[1])/sum(conf),6)
sensitivity <- (conf[4])/(conf[3]+conf[4])
specificity <-  conf[1]/(conf[1]+conf[2])
ppv         <- conf[4]/(conf[4]+conf[2])
npv         <- conf[1]/(conf[1]+conf[3])
precision   <- ppv
recall      <- sensitivity
# I'm giving you the exact names you should use in your output dataframe
metric.names <- c("accuracy", "sensitivity", "specificity",
"ppv", "npv", "precision", "recall")
# Form into data frame
value <- c(accuracy, sensitivity, specificity,
ppv, npv, precision, recall)
# Your data frame should contain ONLY ONE COLUMN named "value"
# assign the metric.names above as the rownames of your data frame (just as the rownames, not as a second column!)
df <- data.frame(row.names = metric.names,value)
full_list<- list(conf,df)
names(full_list) <- c("conf.mat", "perf")
#full_list <<- full_list
# Return a list containing the confusion matrix and the data frame of the metrics
# If "all", return all metrics. Otherwise, return just the requested subset of metrics
if ("all" %in% type){
return(full_list)
} else {
full_list[[2]]<- full_list[[2]]%>%
filter(row.names(full_list[[2]]) %in% type)
return(full_list)
}
}
plotClassMetrics <- function(score, y, xvar = NULL, yvar = c("accuracy", "sensitivity",
"specificity", "ppv", "npv", "precision",
"recall"),
flip.x = FALSE) {
# matches the user-input yvar argument against the list of valid options specified in the function header
yvar <- match.arg(yvar)
# If there are a lot of (more than 100) unique score values, just calculate the metrics
# along an evenly spaced grid of 100 scores.
unique.scores <- unique(score)
if(length(unique.scores) > 100) {
cutoff.seq <- sample(unique.scores, 100, replace = FALSE)
} else { # otherwise just use the unique score values to calculate the metrics
cutoff.seq <- unique.scores
}
# number of score values to evaluate the metrics
n <- length(cutoff.seq)
# initialize the vectors to record the x & y coordinates
x.out <- numeric(n)
y.out <- numeric(n)
# Loop over all values of the score and calculate the performance metrics
for(i in 1:n) {
if(!is.null(xvar)) { # specified metric as x axis values
# call classMetrics to calculate the metrics and record the values
metrics <- classMetrics(score, y, cutoff = cutoff.seq[i], type = c(xvar, yvar))
x.out[i] <- metrics$perf[xvar, 1]
y.out[i] <- metrics$perf[yvar, 1]
} else { # score as x axis values
# call classMetrics to calculate the metrics and record the values
metrics <- classMetrics(score, y, cutoff = cutoff.seq[i], type = c(yvar))
x.out[i] <- cutoff.seq[i]
y.out[i] <- metrics$perf[yvar, 1]
}
}
# flip x values if required
if(flip.x) {
x.out <- 1 - x.out
}
# Combine metrics into a data frame
df.out <- data.frame(score = cutoff.seq, x = x.out, y = y.out)
# Reorder the data frame in increasing order of the x-axis variable
df.out <- df.out[order(df.out$score), ]
# De-duplicate x-axis
df.out <- subset(df.out, subset = !duplicated(df.out$x))
# determine the x-axis label
if(!is.null(xvar)) {
x.text <- ifelse(flip.x, paste0("1 - ", xvar), xvar)
} else {
x.text <- "score"
}
# Construct line plot
print(qplot(data = df.out, x = x, y = y, geom = "line",
xlab = ifelse(is.null(xvar), "score", x.text),
ylab = yvar, ylim = c(0, 1)))
}
ggplot(data = df,aes(x = is_intrusion))+
geom_bar(aes(fill=is_intrusion))+ ggtitle("Class Imbalance")
df<- df%>%select(-c(7:14))%>%select(-c(1,7))
# Upsample the data to artifically overcome sample imbalance
df.more.idx <- sample(which(df$is_intrusion == 1), 900, replace = TRUE)
set.seed(981)
df.upsample <- rbind(df,
df[df.more.idx, ])
ggplot(data = df.upsample,aes(x = is_intrusion))+
geom_bar(aes(fill=is_intrusion))+ ggtitle("Classes Balanced")
# Randomly select 20% of the data to be held out for model validation
test.indexes <- sample(1:nrow(df.upsample),
round(0.2 * nrow(df.upsample)))
train.indexes <- setdiff(1:nrow(df.upsample), test.indexes)
df.train <- df.upsample[train.indexes,]
df.test <- df.upsample[test.indexes,]
intrusion.tree <- rpart(is_intrusion ~ ., df.train)
plot(intrusion.tree)
text(intrusion.tree)
intrusion.party <- as.party(intrusion.tree)
plot(intrusion.party)
print(intrusion.party)
intrusion.full <- rpart(is_intrusion ~ ., data = df.train,
control = rpart.control(minsplit=10, cp=0.002))
# Run the `plotcp` command on this tree. Also look at the `cptable` attribute of `marketing.full`
plotcp(intrusion.full)
intrusion.full$cptable
mycp <- 0.046
intrusion.pruned<- prune(intrusion.full,cp= mycp)
print(intrusion.pruned)
df.pruned.party <- as.party(intrusion.pruned)
plot(df.pruned.party, gp = gpar(fontsize = 7))
my_pred<- predict(intrusion.pruned, df.test, type="prob")[,1]
classMetrics(my_pred, df.test$is_intrusion,cutoff = 0.20)
